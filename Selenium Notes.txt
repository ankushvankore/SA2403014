Steps for configuration of Selenium WebDriver

1. Download latest version of Selenium from selenium.dev site
2. Create a new Java Project
3. Create a new Package
4. Create a new Class
5. Right Click on Project -> Build Path -> Configure Build Path
6. Click on Libraries Tab
7. Click on Class Path
8. Click on Add External Jars Button
9. Select the Jar file downloaded in step no1
10. Click on Open button
11. Click on Apply & Close button

=======================================================
1. Opening the browser => Create object of WebDriver interface (It will open blank browser)
2. get() => Used to launch a specific url (Needs ABSOLUTE URL)
3. driver.manage().window().maximize() => Will maximize the browser window
4. close() => Will close the CURRENT browser window WHICH IS OPNED BY WebDriver OBJECT
5. getTitle() => Retrun the title of WebPage which is opened by WebDriver Object (String)
6. getCurrentUrl() => Returns the url of the page (String)
7. getPageSource() => Returns the rendered html of page (String)
8. findElement() => Finds / Reads the control / Web Control / WebElement on the page (WebElement). Will locate the first occurance
9. findElements() => Reads multiple controls on the web page. (List<WebElement>)
10. getWindowHandles() => Returns IDs of the windows those are opened by Selenium WebDriver. (Set<String>)
11. quit() => Close all the browser windows those are opened by WebDriver object.
12. switchTo.Frame() => It will swith (enter) to the iFrame

========================================
Locators
========================================
Is the way to find out the specific WebElement on the page. 

1. Name
2. Id
3. ClassName => Always remember, class name may have multiple words. Use single word from all these
4. CssSelector
5. XPath
6. LinkText
7. PartialLinkText
8. TagName
9. RelativeLocator




========================================
WebElement
========================================
Every control on webpage is treated as WebElement

WebElement is an interface from Selenium
WebElement object can hold any control on the webpage

Methods
1. sendKeys() => Enter some text in the control. It appends the new text (TextBox)
2. click() => Click on the control
3. getText() => Return the text on the control (String)
4. getAttribute() => Returns the value of any specific attribute (String)
5. isSelected() => Check that whether the control (Checkbox / Radio button) is selected or not. (boolean)
6. isEnabled() => Checks that whether the control is enabled or disabled. (boolean)
7. isDisplayed() => Checks that whether the control is visible on the page or not. (boolean)



=========================================
Common Exceptions 
=========================================
1. InvalidArgumentException => URL is not in correct format 
2. SessionNotCreatedException => The version of WebDriver & browser are not matching (browser is not updated)
3. NoSuchElementException => Selenium is unable to locate the spcific control
	a. Value of locator is wrong
	b. The control (value of attribute) could be dynamic
4. InvalidSelectorException => The value of locator is in wrong format
5. ElementNotInteractableException => The operation cannot be performed on this type of control
6. SessionTimeoutException => If the page not get loaded within 30 seconds.
7. NoAlertPresentException => You are trying to perfrom some actions on alert, but there is no alert present on the page.
8. ElementClickInterceptedException => Your control is hidden by some another control, so WebDriver is unable to click.
9. JavascriptException => You have entered some wrong argument in the js.executeScript() method
=============================
Test Case
=============================
1. Open Echotrack
2. Enter invalid data
3. Click on Login button
4. Error message should display





==================================
CssSelector
==================================

1. Inspect the control
2. Click somewhere inside the DOM
3. Copy the necessary data

tagName[attribute='value']
input[data-testid="royal_email"]
span[class="error"]



CssSelector Special Characters
--------------------------------------

1. ^ => Starts with

	tagName[attribute^='Value']
	button[id^='u_0_5']

2. $ => Ends With 
	tagName[attribute$='value']
	input[data-testid$="email"]


3. * => Contains
	tagName[attribute*='value']
	input[aria-label*="Pass"]
	input[aria-label*="word"]
	input[aria-label*="sswo"]


==============================================
XPath
==============================================
XML Path

Pattankodoli (Kolhapur) Bus Stand => Take a right turn => Hupare Nagar => Water Tank => 9th Lane => on Right hand 15th house

Types of XPath
1. Absolute XPath
	html

2. Relative XPath
	//
	//tagName[@attribute='value']
	
<html>
	div
		div
		div
			form
				div
				fieldset
					input

html/div/div[2]/form/fieldset/input
	
==========================================
Select Class
==========================================
Select class is used to handle a Dropdown List (Combobox) or List Box
This is the only way to handle dropdlown list

Note: DROPDOWN LIST IS HAVING <select> TAG.

Test Case

1. Display Selected country
2. Display total no of countries from the list
3. Display list of all the countries
4. Select USA from the list
5. Display Selected country


Methods
1. getFirstSelectedOption() => Return the selected element from dropdown list. (WebElement)
2. getOptions() => Return list of all the elements / options from the dropdown list. (List<WebElement>)
3. selectByVisibleText() => Selects the option with its text. 
4. selectByValue() => You can pass the value of attribute value for selecting the option.
5. selectByIndex() => You need to pass the index of element. 
6. isMultiple() => Returns true if it is Listbox & returns false if it is Dropdown list (boolean)
7. getAllSelectedOptions() => Returns list of all the selected items from Listbox (



===================================
Synchronization
===================================
Process of adjusting the speed of tool with speed of applciation.

1. Thread.sleep()
	a. It takes mandatory delay
	b. It is applicable to single statement only

2. ImplicitWait
	a. It dosent take mandatory dalay
	b. It is applicable throughout the script

3. ExplicitWait (WebDriverWait)
	a. It is applicable to single statement only.
	b. It dosent take mandatory delay

4. FluentWait
	Mainly used when you want to handle a specific exception.

	w - withTimeout
	i - ignoring
	p - pollingEvery
	u - until

5. PageLoadTimeOut => You can add some more wait till the page get loaded to avoid SessionTimeoutException.


======================================
Handling Table
======================================
1. Display headers of all the columns
2. Display total no of rows
3. Display any Row randomly

======================================
Handling Javascript Alerts
======================================
Alert is an interface which is used to handle javascript alert.

(Alert is a window that normally appear at the middle top on the browser. You cannot inspect it)

Methods
1. driver.switchTo.Alert() => Switch to the alert
2. getText() => Will returns the text on the alert (String)
3. accept() => Will click on Ok button on the alert.
4. dismiss() => Will click on Cancel button on the alert.
5. sendKeys() => Enters some text on the prompt box (IF AVAILABLE)


================================
Mouse Actions
================================
1. Move
2. Right Click
3. Left Click
4. Drag & Drop
5. Double Click


Actions Class => Used to perform all above mouse actions

Methods
1. moveToElement() => Move the mouse pointer to specific control (Not phisically)

==================================
Navigating Methods
==================================



=======================================
Installing TestNG
======================================
1. Go to Help menu
2. Click on Eclipse Marketplace
3. Find for TestNG and click on Go button or hit Enter
4. Click on Install button






